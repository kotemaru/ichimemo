package org.kotemaru.kokorahen.logic;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slim3.controller.upload.FileItem;
import org.slim3.datastore.*;

import org.kotemaru.ichimemo.model.ImageModel;
import org.kotemaru.jsrpc.JsrpcEnvironment;
import org.kotemaru.jsrpc.JsrpcException;
import org.kotemaru.jsrpc.MultiPartMap;
import org.kotemaru.jsrpc.Params;
import org.kotemaru.jsrpc.annotation.JsRpc;
import org.kotemaru.kokorahen.bean.AreaSpotBean;
import org.kotemaru.kokorahen.meta.MemoModelMeta;
import org.kotemaru.kokorahen.meta.ReviewModelMeta;
import org.kotemaru.kokorahen.meta.SpotModelMeta;
import org.kotemaru.kokorahen.model.MemoModel;
import org.kotemaru.kokorahen.model.ReviewModel;
import org.kotemaru.kokorahen.model.SpotModel;
import org.kotemaru.kokorahen.model.UserModel;

import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;
import twitter4j.Twitter;
import twitter4j.TwitterFactory;
import twitter4j.auth.RequestToken;

public abstract class LoginLogic  {
	private static final long serialVersionUID = 1L;
	private static final Logger LOG = Logger.getLogger(LoginLogic.class.getName());
	private static final String PROVIDER_NAME = "google";
	private static final String  GOOGLE = "google";
	private static final String  TWITTER = "twitter";

	public static LoginLogic getInstance(Kokorahen env, String provider) {
		if (GOOGLE.equals(provider)) {
			return new LoginLogicGoogle(env);
		} else if (TWITTER.equals(provider)) {
			return new LoginLogicTwitter(env);
		}
		throw new RuntimeException("Unsupported login provider "+provider);
	}

	abstract public UserModel getLoginUserModel() throws Exception ;
	abstract public String getLoginUrl(String basePath) throws Exception ;
	abstract public String loginCallback() throws Exception ;
}