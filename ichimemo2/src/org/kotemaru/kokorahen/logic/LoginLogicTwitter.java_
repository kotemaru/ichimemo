package org.kotemaru.kokorahen.logic;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slim3.controller.upload.FileItem;
import org.slim3.datastore.*;

import org.kotemaru.jsrpc.JsrpcEnvironment;
import org.kotemaru.jsrpc.JsrpcException;
import org.kotemaru.jsrpc.MultiPartMap;
import org.kotemaru.jsrpc.Params;
import org.kotemaru.jsrpc.annotation.JsRpc;
import org.kotemaru.kokorahen.bean.AreaSpotBean;
import org.kotemaru.kokorahen.jsrpc.Kokorahen;
import org.kotemaru.kokorahen.meta.MemoModelMeta;
import org.kotemaru.kokorahen.meta.ReviewModelMeta;
import org.kotemaru.kokorahen.meta.SpotModelMeta;
import org.kotemaru.kokorahen.model.MemoModel;
import org.kotemaru.kokorahen.model.ReviewModel;
import org.kotemaru.kokorahen.model.SpotModel;
import org.kotemaru.kokorahen.model.UserModel;

import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;
import twitter4j.Twitter;
import twitter4j.TwitterFactory;
import twitter4j.auth.RequestToken;

public class LoginLogicTwitter extends LoginLogic {
	private static final long serialVersionUID = 1L;
	private static final Logger LOG = Logger.getLogger(LoginLogicTwitter.class.getName());
	private static final String PROVIDER_NAME = "google";
	
	private Kokorahen env;

	public LoginLogicTwitter(Kokorahen env) {
		this.env = env;
	}
	
	public UserModel getLoginUserModel() throws Exception {
		UserService us = UserServiceFactory.getUserService();
		if (us.getCurrentUser() == null) return null;

		UserLogic ul = UserLogic.getInstance();
		String name = us.getCurrentUser().getEmail();
		UserModel user = ul.getUserModel(name);
		if (user == null) {
			user = ul.newUserModel(PROVIDER_NAME, name, name);
		}
		user.setLastLogin(new Date());
		ul.putUserModel(user);
		return ul.collectUserInfo(user);
	}

	public String getLoginUrl(String basePath) throws Exception {
		UserService us = UserServiceFactory.getUserService();
		String callback = basePath + "?a0="+PROVIDER_NAME;
		return us.createLoginURL(callback);
	}

	public String loginCallback() throws Exception {
		// nop.
		return null;
	}
	

}
